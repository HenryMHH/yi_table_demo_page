{"version":3,"sources":["api/countryData.ts","components/Modal.tsx","components/CountryDetailModal.tsx","components/Table.tsx","useState/useCountryData.ts","components/StyledTable.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["getCountryData","a","axios","get","res","getCountryDetailData","countryName","CustomModal","isOpen","onClose","data","textAlign","size","colorScheme","mr","onClick","CountryDetailModal","useDisclosure","onOpen","useState","setData","useEffect","then","JSON","stringify","cursor","Table","countryData","useCountryData","React","useMemo","columns","Header","accessor","Cell","row","src","value","w","mx","useTable","initialState","pageIndex","pageSize","useSortBy","usePagination","getTableProps","getTableBodyProps","headerGroups","page","prepareRow","canPreviousPage","canNextPage","pageOptions","pageCount","gotoPage","nextPage","previousPage","state","length","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","render","getRowProps","cells","cell","getCellProps","className","disabled","d","alignItems","fontSize","ml","CustomTable","styled","Box","StyledTable","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b2caad0b.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nexport const getCountryData = async () => {\r\n\tconst res = await axios.get(\r\n\t\t'https://restcountries.eu/rest/v2/all?fields=flag;name;alpha2Code;alpha3Code;nativeName;nativeName;callingCodes'\r\n\t)\r\n\r\n\treturn res\r\n}\r\n\r\nexport const getCountryDetailData = async (countryName: string) => {\r\n\tconst res = await axios.get(\r\n\t\t'https://restcountries.eu/rest/v2/name/' + countryName\r\n\t)\r\n\r\n\treturn res\r\n}\r\n","import {\r\n\tModal,\r\n\tModalOverlay,\r\n\tModalContent,\r\n\tModalHeader,\r\n\tModalFooter,\r\n\tModalBody,\r\n\tModalCloseButton,\r\n\tButton,\r\n\tSpinner,\r\n} from '@chakra-ui/react'\r\n\r\nexport default function CustomModal({\r\n\tisOpen,\r\n\tonClose,\r\n\tdata,\r\n}: {\r\n\tisOpen: boolean\r\n\tonClose: () => void\r\n\tdata: any\r\n}) {\r\n\treturn (\r\n\t\t<Modal isOpen={isOpen} onClose={onClose}>\r\n\t\t\t<ModalOverlay />\r\n\t\t\t<ModalContent>\r\n\t\t\t\t<ModalHeader>其他資訊</ModalHeader>\r\n\t\t\t\t<ModalCloseButton />\r\n\t\t\t\t<ModalBody textAlign=\"center\">\r\n\t\t\t\t\t{data ? data : <Spinner size=\"xl\" />}\r\n\t\t\t\t</ModalBody>\r\n\t\t\t\t<ModalFooter>\r\n\t\t\t\t\t<Button colorScheme=\"blue\" mr={3} onClick={onClose}>\r\n\t\t\t\t\t\t關閉\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</ModalFooter>\r\n\t\t\t</ModalContent>\r\n\t\t</Modal>\r\n\t)\r\n}\r\n","import { Box, useDisclosure } from '@chakra-ui/react'\r\nimport { useEffect, useState } from 'react'\r\nimport { getCountryDetailData } from '../api/countryData'\r\n\r\nimport CustomModal from './Modal'\r\n\r\ninterface props {\r\n\tcountryName: string\r\n}\r\n\r\nexport default function CountryDetailModal({ countryName }: props) {\r\n\tconst { isOpen, onOpen, onClose } = useDisclosure()\r\n\tconst [data, setData] = useState<any>()\r\n\r\n\tuseEffect(() => {\r\n\t\tif (isOpen)\r\n\t\t\tgetCountryDetailData(countryName).then((res) => {\r\n\t\t\t\tsetData(JSON.stringify(res.data[0]))\r\n\t\t\t\tonOpen()\r\n\t\t\t})\r\n\t}, [isOpen])\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Box onClick={onOpen} cursor=\"pointer\">\r\n\t\t\t\t{countryName}\r\n\t\t\t</Box>\r\n\t\t\t{isOpen ? (\r\n\t\t\t\t<CustomModal isOpen={isOpen} onClose={onClose} data={data} />\r\n\t\t\t) : null}\r\n\t\t</>\r\n\t)\r\n}\r\n","import { Box, Image, Spinner } from '@chakra-ui/react'\r\nimport React from 'react'\r\nimport useCountryData from '../useState/useCountryData'\r\nimport { useTable, usePagination, Column, useSortBy } from 'react-table'\r\nimport CountryDetailModal from './CountryDetailModal'\r\n\r\ninterface countryData {\r\n\tflag: string\r\n\tname: string\r\n\talpha2Code: string\r\n\talpha3Code: string\r\n\tcallingCodes: string[]\r\n\tnativeName: string\r\n}\r\n\r\nexport default function Table() {\r\n\tconst countryData: Array<countryData> = useCountryData()\r\n\r\n\tconst data = React.useMemo(() => countryData, [countryData])\r\n\r\n\tconst columns: Array<Column<countryData>> = React.useMemo(\r\n\t\t() => [\r\n\t\t\t{\r\n\t\t\t\tHeader: 'Flag',\r\n\t\t\t\taccessor: 'flag', // accessor is the \"key\" in the data\r\n\t\t\t\tCell: (row) => {\r\n\t\t\t\t\treturn <Image src={row.value} w=\"50px\" mx=\"auto\" />\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tHeader: 'Name',\r\n\t\t\t\taccessor: 'name',\r\n\t\t\t\tCell: (row) => {\r\n\t\t\t\t\treturn <CountryDetailModal countryName={row.value} />\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tHeader: 'Alpha2Code',\r\n\t\t\t\taccessor: 'alpha2Code',\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tHeader: 'Alpha3Code',\r\n\t\t\t\taccessor: 'alpha3Code',\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tHeader: 'CallingCodes',\r\n\t\t\t\taccessor: 'callingCodes',\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tHeader: 'NativeName',\r\n\t\t\t\taccessor: 'nativeName',\r\n\t\t\t},\r\n\t\t],\r\n\t\t[]\r\n\t)\r\n\r\n\tconst {\r\n\t\tgetTableProps,\r\n\t\tgetTableBodyProps,\r\n\t\theaderGroups,\r\n\t\tpage,\r\n\t\tprepareRow,\r\n\r\n\t\t// pagination\r\n\t\tcanPreviousPage,\r\n\t\tcanNextPage,\r\n\t\tpageOptions,\r\n\t\tpageCount,\r\n\t\tgotoPage,\r\n\t\tnextPage,\r\n\t\tpreviousPage,\r\n\t\tstate: { pageIndex },\r\n\t} = useTable(\r\n\t\t{ columns, data, initialState: { pageIndex: 1, pageSize: 25 } },\r\n\t\tuseSortBy,\r\n\t\tusePagination\r\n\t)\r\n\r\n\treturn countryData.length !== 0 ? (\r\n\t\t<>\r\n\t\t\t<table {...getTableProps()}>\r\n\t\t\t\t<thead>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// Loop over the header rows\r\n\t\t\t\t\t\theaderGroups.map((headerGroup) => (\r\n\t\t\t\t\t\t\t// Apply the header row props\r\n\t\t\t\t\t\t\t<tr {...headerGroup.getHeaderGroupProps()}>\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t// Loop over the headers in each row\r\n\t\t\t\t\t\t\t\t\theaderGroup.headers.map((column) => {\r\n\t\t\t\t\t\t\t\t\t\t// Apply the header cell props\r\n\r\n\t\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t\t<th\r\n\t\t\t\t\t\t\t\t\t\t\t\t{...column.getHeaderProps(\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tcolumn.getSortByToggleProps()\r\n\t\t\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t// Render the header\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tcolumn.render('Header')\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t</th>\r\n\t\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t))\r\n\t\t\t\t\t}\r\n\t\t\t\t</thead>\r\n\t\t\t\t{/* Apply the table body props */}\r\n\t\t\t\t<tbody {...getTableBodyProps()}>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// Loop over the table rows\r\n\t\t\t\t\t\tpage.map((row) => {\r\n\t\t\t\t\t\t\t// Prepare the row for display\r\n\t\t\t\t\t\t\tprepareRow(row)\r\n\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t// Apply the row props\r\n\t\t\t\t\t\t\t\t<tr {...row.getRowProps()}>\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t// Loop over the rows cells\r\n\t\t\t\t\t\t\t\t\t\trow.cells.map((cell) => {\r\n\t\t\t\t\t\t\t\t\t\t\t// console.log(cell.column.Header)\r\n\t\t\t\t\t\t\t\t\t\t\t// Apply the cell props\r\n\t\t\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t\t\t<td {...cell.getCellProps()}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Render the cell contents\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tcell.render('Cell')\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\t\t\t\t</tbody>\r\n\t\t\t</table>\r\n\t\t\t<div className=\"pagination\">\r\n\t\t\t\t<button onClick={() => gotoPage(0)} disabled={!canPreviousPage}>\r\n\t\t\t\t\t{'<<'}\r\n\t\t\t\t</button>{' '}\r\n\t\t\t\t<button onClick={() => previousPage()} disabled={!canPreviousPage}>\r\n\t\t\t\t\t{'<'}\r\n\t\t\t\t</button>{' '}\r\n\t\t\t\t<button onClick={() => nextPage()} disabled={!canNextPage}>\r\n\t\t\t\t\t{'>'}\r\n\t\t\t\t</button>{' '}\r\n\t\t\t\t<button onClick={() => gotoPage(pageCount - 1)} disabled={!canNextPage}>\r\n\t\t\t\t\t{'>>'}\r\n\t\t\t\t</button>{' '}\r\n\t\t\t\t<span>\r\n\t\t\t\t\tPage{' '}\r\n\t\t\t\t\t<strong>\r\n\t\t\t\t\t\t{pageIndex + 1} of {pageOptions.length}\r\n\t\t\t\t\t</strong>{' '}\r\n\t\t\t\t</span>\r\n\t\t\t</div>\r\n\t\t</>\r\n\t) : (\r\n\t\t<Box d=\"flex\" alignItems=\"center\" fontSize=\"3rem\">\r\n\t\t\t資料讀取中\r\n\t\t\t<Spinner ml={5} size=\"xl\" />\r\n\t\t</Box>\r\n\t)\r\n}\r\n","import { useEffect, useState } from 'react'\r\nimport { getCountryData } from '../api/countryData'\r\n\r\nexport default function useCountryData() {\r\n\tconst [data, setData] = useState([])\r\n\tuseEffect(() => {\r\n\t\tgetCountryData().then((res) => setData(res.data))\r\n\t}, [])\r\n\treturn data\r\n}\r\n","import React from 'react'\r\nimport Table from './Table'\r\nimport styled from 'styled-components'\r\nimport { Box } from '@chakra-ui/react'\r\n\r\nconst CustomTable = styled(Box)`\r\n\twidth: 100vw;\r\n\theight: 100vh;\r\n\tdisplay: grid;\r\n\tplace-items: center;\r\n\ttable {\r\n\t\tmax-width: 90vw;\r\n\t}\r\n\ttd,\r\n\tth {\r\n\t\tborder: 1px solid;\r\n\t\ttext-align: center;\r\n\t}\r\n\r\n\tth {\r\n\t\tpadding: 0.5em 1em;\r\n\t}\r\n`\r\n\r\nexport default function StyledTable() {\r\n\treturn (\r\n\t\t<CustomTable>\r\n\t\t\t<Table />\r\n\t\t</CustomTable>\r\n\t)\r\n}\r\n","import StyledTable from './components/StyledTable'\r\nfunction App() {\r\n\treturn (\r\n\t\t<div className=\"App\">\r\n\t\t\t<StyledTable />\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default App\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport reportWebVitals from './reportWebVitals'\r\nimport { ChakraProvider } from '@chakra-ui/react'\r\n\r\nReactDOM.render(\r\n\t<React.StrictMode>\r\n\t\t<ChakraProvider>\r\n\t\t\t<App />\r\n\t\t</ChakraProvider>\r\n\t</React.StrictMode>,\r\n\tdocument.getElementById('root')\r\n)\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals()\r\n"],"sourceRoot":""}