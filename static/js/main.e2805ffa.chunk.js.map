{"version":3,"sources":["api/countryData.ts","components/Modal.tsx","components/CountryDetailModal.tsx","components/Table.tsx","useState/useCountryData.ts","components/StyledTable.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["getCountryData","a","axios","get","res","getCountryDetailData","countryName","CustomModal","isOpen","onClose","data","textAlign","size","colorScheme","mr","onClick","CountryDetailModal","useDisclosure","onOpen","useState","setData","useEffect","then","JSON","stringify","cursor","DefaultColumnFilter","column","filterValue","setFilter","value","onChange","e","target","undefined","placeholder","borderColor","Table","countryData","useCountryData","React","useMemo","defaultColumn","Filter","columns","Header","accessor","Cell","row","src","w","mx","disableFilters","useTable","initialState","pageIndex","pageSize","useFilters","useSortBy","usePagination","getTableProps","getTableBodyProps","headerGroups","page","prepareRow","canPreviousPage","canNextPage","pageOptions","pageCount","gotoPage","nextPage","previousPage","state","length","className","disabled","d","fontSize","map","headerGroup","getHeaderGroupProps","headers","py","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","ml","borderTop","px","canFilter","defaultValue","getRowProps","cells","cell","getCellProps","alignItems","CustomTable","styled","Box","StyledTable","App","pb","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e2805ffa.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nexport const getCountryData = async () => {\r\n\tconst res = await axios.get(\r\n\t\t'https://restcountries.eu/rest/v2/all?fields=flag;name;alpha2Code;alpha3Code;nativeName;nativeName;callingCodes'\r\n\t)\r\n\r\n\treturn res\r\n}\r\n\r\nexport const getCountryDetailData = async (countryName: string) => {\r\n\tconst res = await axios.get(\r\n\t\t'https://restcountries.eu/rest/v2/name/' + countryName\r\n\t)\r\n\r\n\treturn res\r\n}\r\n","import {\r\n\tModal,\r\n\tModalOverlay,\r\n\tModalContent,\r\n\tModalHeader,\r\n\tModalFooter,\r\n\tModalBody,\r\n\tModalCloseButton,\r\n\tButton,\r\n\tSpinner,\r\n} from '@chakra-ui/react'\r\n\r\nexport default function CustomModal({\r\n\tisOpen,\r\n\tonClose,\r\n\tdata,\r\n}: {\r\n\tisOpen: boolean\r\n\tonClose: () => void\r\n\tdata: any\r\n}) {\r\n\treturn (\r\n\t\t<Modal isOpen={isOpen} onClose={onClose}>\r\n\t\t\t<ModalOverlay />\r\n\t\t\t<ModalContent>\r\n\t\t\t\t<ModalHeader>其他資訊</ModalHeader>\r\n\t\t\t\t<ModalCloseButton />\r\n\t\t\t\t<ModalBody textAlign=\"center\">\r\n\t\t\t\t\t{data ? data : <Spinner size=\"xl\" />}\r\n\t\t\t\t</ModalBody>\r\n\t\t\t\t<ModalFooter>\r\n\t\t\t\t\t<Button colorScheme=\"blue\" mr={3} onClick={onClose}>\r\n\t\t\t\t\t\t關閉\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</ModalFooter>\r\n\t\t\t</ModalContent>\r\n\t\t</Modal>\r\n\t)\r\n}\r\n","import { Box, useDisclosure } from '@chakra-ui/react'\r\nimport { useEffect, useState } from 'react'\r\nimport { getCountryDetailData } from '../api/countryData'\r\n\r\nimport CustomModal from './Modal'\r\n\r\ninterface props {\r\n\tcountryName: string\r\n}\r\n\r\nexport default function CountryDetailModal({ countryName }: props) {\r\n\tconst { isOpen, onOpen, onClose } = useDisclosure()\r\n\tconst [data, setData] = useState<any>()\r\n\r\n\tuseEffect(() => {\r\n\t\tif (isOpen)\r\n\t\t\tgetCountryDetailData(countryName).then((res) => {\r\n\t\t\t\tsetData(JSON.stringify(res.data[0]))\r\n\t\t\t\tonOpen()\r\n\t\t\t})\r\n\t}, [isOpen])\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Box onClick={onOpen} cursor=\"pointer\">\r\n\t\t\t\t{countryName}\r\n\t\t\t</Box>\r\n\t\t\t{isOpen ? (\r\n\t\t\t\t<CustomModal isOpen={isOpen} onClose={onClose} data={data} />\r\n\t\t\t) : null}\r\n\t\t</>\r\n\t)\r\n}\r\n","import { Box, Image, Input, Spinner, Text } from '@chakra-ui/react'\r\nimport React from 'react'\r\nimport useCountryData from '../useState/useCountryData'\r\nimport {\r\n\tuseTable,\r\n\tusePagination,\r\n\tColumn,\r\n\tuseSortBy,\r\n\tuseFilters,\r\n} from 'react-table'\r\nimport CountryDetailModal from './CountryDetailModal'\r\n\r\ninterface countryData {\r\n\tflag: string\r\n\tname: string\r\n\talpha2Code: string\r\n\talpha3Code: string\r\n\tcallingCodes: string[]\r\n\tnativeName: string\r\n}\r\n\r\nfunction DefaultColumnFilter({ column: { filterValue, setFilter } }: any) {\r\n\treturn (\r\n\t\t<Input\r\n\t\t\tvalue={filterValue || ''}\r\n\t\t\tonChange={(e) => {\r\n\t\t\t\tsetFilter(e.target.value || undefined) // Set undefined to remove the filter entirely\r\n\t\t\t}}\r\n\t\t\tplaceholder={`請輸入國家`}\r\n\t\t\tborderColor=\"black\"\r\n\t\t/>\r\n\t)\r\n}\r\n\r\nexport default function Table() {\r\n\tconst countryData: Array<countryData> = useCountryData()\r\n\r\n\tconst data = React.useMemo(() => countryData, [countryData])\r\n\r\n\tconst defaultColumn = React.useMemo(\r\n\t\t() => ({\r\n\t\t\t// Let's set up our default Filter UI\r\n\t\t\tFilter: DefaultColumnFilter,\r\n\t\t}),\r\n\t\t[]\r\n\t)\r\n\r\n\tconst columns: Array<Column<countryData>> = React.useMemo(\r\n\t\t() => [\r\n\t\t\t{\r\n\t\t\t\tHeader: 'Flag',\r\n\t\t\t\taccessor: 'flag', // accessor is the \"key\" in the data\r\n\t\t\t\tCell: (row) => {\r\n\t\t\t\t\treturn <Image src={row.value} w=\"50px\" mx=\"auto\" />\r\n\t\t\t\t},\r\n\r\n\t\t\t\tdisableFilters: true,\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tHeader: 'Name',\r\n\t\t\t\taccessor: 'name',\r\n\t\t\t\tCell: (row) => {\r\n\t\t\t\t\treturn <CountryDetailModal countryName={row.value} />\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tHeader: 'Alpha2Code',\r\n\t\t\t\taccessor: 'alpha2Code',\r\n\t\t\t\tdisableFilters: true,\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tHeader: 'Alpha3Code',\r\n\t\t\t\taccessor: 'alpha3Code',\r\n\t\t\t\tdisableFilters: true,\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tHeader: 'CallingCodes',\r\n\t\t\t\taccessor: 'callingCodes',\r\n\t\t\t\tdisableFilters: true,\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tHeader: 'NativeName',\r\n\t\t\t\taccessor: 'nativeName',\r\n\t\t\t\tdisableFilters: true,\r\n\t\t\t},\r\n\t\t],\r\n\t\t[]\r\n\t)\r\n\r\n\tconst {\r\n\t\tgetTableProps,\r\n\t\tgetTableBodyProps,\r\n\t\theaderGroups,\r\n\t\tpage,\r\n\t\tprepareRow,\r\n\r\n\t\t// pagination\r\n\t\tcanPreviousPage,\r\n\t\tcanNextPage,\r\n\t\tpageOptions,\r\n\t\tpageCount,\r\n\t\tgotoPage,\r\n\t\tnextPage,\r\n\t\tpreviousPage,\r\n\t\tstate: { pageIndex },\r\n\t} = useTable(\r\n\t\t{\r\n\t\t\tcolumns,\r\n\t\t\tdata,\r\n\t\t\tdefaultColumn,\r\n\t\t\tinitialState: { pageIndex: 0, pageSize: 25 },\r\n\t\t},\r\n\t\tuseFilters,\r\n\t\tuseSortBy,\r\n\t\tusePagination\r\n\t)\r\n\r\n\treturn countryData.length !== 0 ? (\r\n\t\t<>\r\n\t\t\t<div className=\"pagination\">\r\n\t\t\t\t<button onClick={() => gotoPage(0)} disabled={!canPreviousPage}>\r\n\t\t\t\t\t{'<<'}\r\n\t\t\t\t</button>{' '}\r\n\t\t\t\t<button onClick={() => previousPage()} disabled={!canPreviousPage}>\r\n\t\t\t\t\t{'<'}\r\n\t\t\t\t</button>{' '}\r\n\t\t\t\t<button onClick={() => nextPage()} disabled={!canNextPage}>\r\n\t\t\t\t\t{'>'}\r\n\t\t\t\t</button>{' '}\r\n\t\t\t\t<button onClick={() => gotoPage(pageCount - 1)} disabled={!canNextPage}>\r\n\t\t\t\t\t{'>>'}\r\n\t\t\t\t</button>{' '}\r\n\t\t\t\t<Box d=\"inline\" fontSize=\"1.5em\">\r\n\t\t\t\t\tPage{' '}\r\n\t\t\t\t\t<strong>\r\n\t\t\t\t\t\t{pageIndex + 1} of {pageOptions.length}\r\n\t\t\t\t\t</strong>{' '}\r\n\t\t\t\t</Box>\r\n\t\t\t</div>\r\n\t\t\t<table {...getTableProps()}>\r\n\t\t\t\t<thead>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// Loop over the header rows\r\n\t\t\t\t\t\theaderGroups.map((headerGroup) => (\r\n\t\t\t\t\t\t\t// Apply the header row props\r\n\t\t\t\t\t\t\t<tr {...headerGroup.getHeaderGroupProps()}>\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t// Loop over the headers in each row\r\n\t\t\t\t\t\t\t\t\theaderGroup.headers.map((column) => {\r\n\t\t\t\t\t\t\t\t\t\t// Apply the header cell props\r\n\r\n\t\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t\t<th>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<Box\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tpy=\".5em\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t{...column.getHeaderProps(\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolumn.getSortByToggleProps()\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Render the header\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolumn.render('Header')\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t{column.isSorted ? (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolumn.isSortedDesc ? (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Text d=\"inline\" ml=\"1em\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&uarr;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Text>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Text d=\"inline\" ml=\"1em\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&darr;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Text>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t' '\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<Box borderTop=\"1px solid\" py=\".5em\" px=\"1em\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t{column.canFilter ? (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// <Input\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// \tplaceholder=\"請輸入國家\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// \tborderColor=\"black\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// \ttype=\"text\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// \tonChange={(e) => column.setFilter(e.target.value)}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// />\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolumn.render('Filter')\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Input disabled defaultValue=\"暫不開放\" />\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t\t\t\t\t</th>\r\n\t\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t))\r\n\t\t\t\t\t}\r\n\t\t\t\t</thead>\r\n\t\t\t\t{/* Apply the table body props */}\r\n\t\t\t\t<tbody {...getTableBodyProps()}>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// Loop over the table rows\r\n\t\t\t\t\t\tpage.map((row) => {\r\n\t\t\t\t\t\t\t// Prepare the row for display\r\n\t\t\t\t\t\t\tprepareRow(row)\r\n\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t// Apply the row props\r\n\t\t\t\t\t\t\t\t<tr {...row.getRowProps()}>\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t// Loop over the rows cells\r\n\t\t\t\t\t\t\t\t\t\trow.cells.map((cell) => {\r\n\t\t\t\t\t\t\t\t\t\t\t// console.log(cell.column.Header)\r\n\t\t\t\t\t\t\t\t\t\t\t// Apply the cell props\r\n\t\t\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t\t\t<td {...cell.getCellProps()}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Render the cell contents\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tcell.render('Cell')\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\t\t\t\t</tbody>\r\n\t\t\t</table>\r\n\t\t</>\r\n\t) : (\r\n\t\t<Box d=\"flex\" alignItems=\"center\" fontSize=\"3rem\">\r\n\t\t\t資料讀取中\r\n\t\t\t<Spinner ml={5} size=\"xl\" />\r\n\t\t</Box>\r\n\t)\r\n}\r\n","import { useEffect, useState } from 'react'\r\nimport { getCountryData } from '../api/countryData'\r\n\r\nexport default function useCountryData() {\r\n\tconst [data, setData] = useState([])\r\n\tuseEffect(() => {\r\n\t\tgetCountryData().then((res) => setData(res.data))\r\n\t}, [])\r\n\treturn data\r\n}\r\n","import Table from './Table'\r\nimport styled from 'styled-components'\r\nimport { Box, Text } from '@chakra-ui/react'\r\n\r\nconst CustomTable = styled(Box)`\r\n\tdisplay: flex;\r\n\talign-items: center;\r\n\r\n\tflex-direction: column;\r\n\r\n\ttable {\r\n\t\tmax-width: 90vw;\r\n\t}\r\n\ttd,\r\n\tth {\r\n\t\tborder: 1px solid;\r\n\t\ttext-align: center;\r\n\t\twidth: 200px;\r\n\t}\r\n\tbutton {\r\n\t\tfont-size: 2em;\r\n\t\tmargin: 0 0.2em;\r\n\t\ttext-decoration: underline;\r\n\t}\r\n`\r\n\r\nexport default function StyledTable() {\r\n\treturn (\r\n\t\t<CustomTable>\r\n\t\t\t<Table />\r\n\t\t</CustomTable>\r\n\t)\r\n}\r\n","import StyledTable from './components/StyledTable'\r\nimport { Box, Text } from '@chakra-ui/react'\r\nfunction App() {\r\n\treturn (\r\n\t\t<Box className=\"App\" textAlign=\"center\" pb=\"2em\">\r\n\t\t\t<Text fontSize=\"4em\">面試考題</Text>\r\n\t\t\t<StyledTable />\r\n\t\t</Box>\r\n\t)\r\n}\r\n\r\nexport default App\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport reportWebVitals from './reportWebVitals'\r\nimport { ChakraProvider } from '@chakra-ui/react'\r\n\r\nReactDOM.render(\r\n\t<React.StrictMode>\r\n\t\t<ChakraProvider>\r\n\t\t\t<App />\r\n\t\t</ChakraProvider>\r\n\t</React.StrictMode>,\r\n\tdocument.getElementById('root')\r\n)\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals()\r\n"],"sourceRoot":""}